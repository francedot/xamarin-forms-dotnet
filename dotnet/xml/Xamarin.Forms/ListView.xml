<Type Name="ListView" FullName="Xamarin.Forms.ListView">
  <TypeSignature Language="C#" Value="public class ListView : Xamarin.Forms.ItemsView&lt;Xamarin.Forms.Cell&gt;, Xamarin.Forms.IElementConfiguration&lt;Xamarin.Forms.ListView&gt;, Xamarin.Forms.IListViewController" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListView extends Xamarin.Forms.ItemsView`1&lt;class Xamarin.Forms.Cell&gt; implements class Xamarin.Forms.IElementConfiguration`1&lt;class Xamarin.Forms.ListView&gt;, class Xamarin.Forms.IElementController, class Xamarin.Forms.IListViewController, class Xamarin.Forms.IViewController, class Xamarin.Forms.IVisualElementController" />
  <TypeSignature Language="DocId" Value="T:Xamarin.Forms.ListView" />
  <TypeSignature Language="VB.NET" Value="Public Class ListView&#xA;Inherits ItemsView(Of Cell)&#xA;Implements IElementConfiguration(Of ListView), IListViewController" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.Forms.Core</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Xamarin.Forms.ItemsView&lt;Xamarin.Forms.Cell&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TVisual">Xamarin.Forms.Cell</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Xamarin.Forms.IElementConfiguration&lt;Xamarin.Forms.ListView&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Xamarin.Forms.IListViewController</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Xamarin.Forms.RenderWith(typeof(Xamarin.Forms.Platform._ListViewRenderer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An <see cref="T:Xamarin.Forms.ItemsView" /> that displays a collection of data as a vertical list.</summary>
    <remarks>
      <para>
        <img href="ListView.TripleScreenShot.png" />
      </para>
      <para>The following example shows a basic use:</para>
      <example>
        <code lang="C#"><![CDATA[
using System;
using System.Collections.Generic;
using Xamarin.Forms;

namespace FormsGallery
{
class ListViewDemoPage : ContentPage
    {
        class Person
        {
            public Person(string name, DateTime birthday, Color favoriteColor)
            {
                this.Name = name;
                this.Birthday = birthday;
                this.FavoriteColor = favoriteColor;
            }

            public string Name { private set; get; }

            public DateTime Birthday { private set; get; }

            public Color FavoriteColor { private set; get; }
        };

        public ListViewDemoPage()
        {
            Label header = new Label
            {
                Text = "ListView",
                FontSize = Device.GetNamedSize (NamedSize.Large, typeof(Label)),
                HorizontalOptions = LayoutOptions.Center
            };

            // Define some data.
            List<Person> people = new List<Person>
            {
                new Person("Abigail", new DateTime(1975, 1, 15), Color.Aqua),
                new Person("Bob", new DateTime(1976, 2, 20), Color.Black),
                // ...etc.,...
                new Person("Yvonne", new DateTime(1987, 1, 10), Color.Purple),
                new Person("Zachary", new DateTime(1988, 2, 5), Color.Red)
            };

            // Create the ListView.
            ListView listView = new ListView
            {
                // Source of data items.
                ItemsSource = people,

                // Define template for displaying each item.
                // (Argument of DataTemplate constructor is called for 
                //      each item; it must return a Cell derivative.)
                ItemTemplate = new DataTemplate(() =>
                    {
                        // Create views with bindings for displaying each property.
                        Label nameLabel = new Label();
                        nameLabel.SetBinding(Label.TextProperty, "Name");

                        Label birthdayLabel = new Label();
                        birthdayLabel.SetBinding(Label.TextProperty,
                            new Binding("Birthday", BindingMode.OneWay, 
                                null, null, "Born {0:d}"));

                        BoxView boxView = new BoxView();
                        boxView.SetBinding(BoxView.ColorProperty, "FavoriteColor");

                        // Return an assembled ViewCell.
                        return new ViewCell
                        {
                            View = new StackLayout
                            {
                                Padding = new Thickness(0, 5),
                                Orientation = StackOrientation.Horizontal,
                                Children = 
                                {
                                    boxView,
                                    new StackLayout
                                    {
                                        VerticalOptions = LayoutOptions.Center,
                                        Spacing = 0,
                                        Children = 
                                        {
                                            nameLabel,
                                            birthdayLabel
                                        }
                                        }
                                }
                                }
                        };
                    })
            };

            // Accomodate iPhone status bar.
            this.Padding = new Thickness(10, Device.OnPlatform(20, 0, 0), 10, 5);

            // Build the page.
            this.Content = new StackLayout
            {
                Children = 
                {
                    header,
                    listView
                }
                };
        }
    }
}

]]></code>
      </example>
      <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.ListView" /> class:</para>
      <list type="table">
        <listheader>
          <term>Property</term>
          <description>Value</description>
        </listheader>
        <!-- TODO: Ask about these bindings.
                <item>
                    <term>GroupDisplayBinding</term>
                    <description><para></para></description>
                </item>
                <item>
                    <term>GroupHeaderTemplate</term>
                    <description><para></para></description>
                </item>
                <item>
                <item>
                    <term>GroupShortNameBinding</term>
                    <description><para></para></description>
                </item>-->
        <item>
          <term>HasUnevenRows</term>
          <description>
            <para>
              <c>true</c> or <c>false</c>, to indicate whether the items in the list all have the same height.</para>
          </description>
        </item>
        <item>
          <term>IsGroupingEnabled</term>
          <description>
            <para>
              <c>true</c> or <c>false</c>, to indicate whether grouping is enabled.</para>
          </description>
        </item>
        <item>
          <term>RowHeight</term>
          <description>
            <para>An integer that describes the height of the items in the list. This is ignored if <c>HasUnevenRows</c> is <c>true</c>.</para>
          </description>
        </item>
        <!-- TODO: Named item? Index? What works?
                <item>
                    <term>SelectedItem</term>
                    <description><para></para></description>
                </item>-->
      </list>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListView (Xamarin.Forms.ListViewCachingStrategy cachingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Xamarin.Forms.ListViewCachingStrategy cachingStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.#ctor(Xamarin.Forms.ListViewCachingStrategy)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cachingStrategy As ListViewCachingStrategy)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cachingStrategy" Type="Xamarin.Forms.ListViewCachingStrategy" />
      </Parameters>
      <Docs>
        <param name="cachingStrategy">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginRefresh">
      <MemberSignature Language="C#" Value="public void BeginRefresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginRefresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.BeginRefresh" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginRefresh ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enters the refreshing state by setting the <see cref="P:Xamarin.Forms.ListView.IsRefreshing" /> property to <see langword="true" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CachingStrategy">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.ListViewCachingStrategy CachingStrategy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Xamarin.Forms.ListViewCachingStrategy CachingStrategy" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.CachingStrategy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CachingStrategy As ListViewCachingStrategy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.ListViewCachingStrategy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefault">
      <MemberSignature Language="C#" Value="protected override Xamarin.Forms.Cell CreateDefault (object item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Xamarin.Forms.Cell CreateDefault(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.CreateDefault(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDefault (item As Object) As Cell" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.Cell</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">The item to create a default visual for.</param>
        <summary>Creates an instance of the default visual representation of an item.</summary>
        <returns>
          A <see cref="T:Xamarin.Forms.TextCell" /> instance with its text set to the string representation of the object (<see cref="M:System.Object.ToString" />).
        </returns>
        <remarks>
          <para>
            This method is called by the templating system when <see cref="P:Xamarin.Forms.ListView.ItemTemplate" /> is <see langword="null" />.
          </para>
          <para>
            The <see cref="P:Xamarin.Forms.BindableObject.BindingContext" /> of the returned object will automatically be set to <paramref name="item" />, there is no
            need to set it yourself. If you do, it will be overridden.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultCell">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.Cell CreateDefaultCell (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Xamarin.Forms.Cell CreateDefaultCell(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.CreateDefaultCell(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDefaultCell (item As Object) As Cell" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.Cell</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">For internal use by the Xamarin.Forms platform..</param>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndRefresh">
      <MemberSignature Language="C#" Value="public void EndRefresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndRefresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.EndRefresh" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndRefresh ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exits the refreshing state by setting the <see cref="P:Xamarin.Forms.ListView.IsRefreshing" /> property to <see langword="false" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Footer">
      <MemberSignature Language="C#" Value="public object Footer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Footer" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.Footer" />
      <MemberSignature Language="VB.NET" Value="Public Property Footer As Object" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the string, binding, or view that will be displayed at the bottom of the list view.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FooterElement">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.Element FooterElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.Forms.Element FooterElement" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.FooterElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FooterElement As Element" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.Element</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FooterProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty FooterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty FooterProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.ListView.FooterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FooterProperty As BindableProperty " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.Footer" /> property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FooterTemplate">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.DataTemplate FooterTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.Forms.DataTemplate FooterTemplate" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.FooterTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Property FooterTemplate As DataTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a data template to use to format a data object for display at the bottom of the list view.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FooterTemplateProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty FooterTemplateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty FooterTemplateProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.ListView.FooterTemplateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FooterTemplateProperty As BindableProperty " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.FooterTemplate" /> property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDisplayTextFromGroup">
      <MemberSignature Language="C#" Value="public string GetDisplayTextFromGroup (object cell);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetDisplayTextFromGroup(object cell) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.GetDisplayTextFromGroup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDisplayTextFromGroup (cell As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="cell">For internal use by the Xamarin.Forms platform.</param>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupDisplayBinding">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.BindingBase GroupDisplayBinding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.Forms.BindingBase GroupDisplayBinding" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.GroupDisplayBinding" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupDisplayBinding As BindingBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindingBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the binding to use for display the group header.</summary>
        <value>The <see cref="T:Xamarin.Forms.BindingBase" /> instance to apply to grouped lists, or <see cref="null" />.</value>
        <remarks>
          <para>
                        This binding can be used to simply set a the text of the group headers without defining a full template and uses the default visuals
                        of the platform to display it. The binding is applied to the <see cref="T:System.Collections.IEnumerable" /> of the group.
                    </para>
          <para>
                        This property is mutually exclusive with <see cref="P:Xamarin.Forms.ListView.GroupHeaderTemplate" /> property. Setting it will set
                        <see cref="P:Xamarin.Forms.ListView.GroupHeaderTemplate" /> to <see langword="null" />.
                    </para>
        </remarks>
        <example>
          <para>This example shows an alphabetized list of people, grouped by first initial with the display binding set.</para>
          <code lang="C#"><![CDATA[
    class Person
    {
        public string FullName
        {
            get;
            set;
        }

        public string Address
        {
            get;
            set;
        }
    }
                        ]]></code>
          <code lang="C#"><![CDATA[
    class Group : ObservableCollection<Person>
    {
        public Group (string firstInitial)
        {
            FirstInitial = firstInitial;
        }

        public string FirstInitial
        {
            get;
            private set;
        }
    }
                        ]]></code>
          <code lang="C#"><![CDATA[
    ListView CreateListView()
    {
        var listView = new ListView {
            IsGroupingEnabled = true,
            GroupDisplayBinding = new Binding ("FirstInitial"),
            GroupShortNameBinding = new Binding ("FirstInitial")
        };

        var template = new DataTemplate (typeof (TextCell));
        template.SetBinding (TextCell.TextProperty, "FullName");
        template.SetBinding (TextCell.DetailProperty, "Address");

        itemsView.ItemTemplate = template;
        itemsView.ItemsSource = new[] {
            new Group ("C") {
                new Person { FullName = "Caprice Nave" }
            },

            new Group ("J") {
                new Person { FullName = "James Smith", Address = "404 Nowhere Street" },
                new Person { FullName = "John Doe", Address = "404 Nowhere Ave" }
            }
        };
    }
                        ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GroupHeaderTemplate">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.DataTemplate GroupHeaderTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.Forms.DataTemplate GroupHeaderTemplate" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.GroupHeaderTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupHeaderTemplate As DataTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a <see cref="T:Xamarin.Forms.DataTemplate" /> for group headers.</summary>
        <value>The <see cref="T:Xamarin.Forms.DataTemplate" /> for group headers, or <see langword="null" />.</value>
        <remarks>
          <para>
            Use this property to define a template for a <see cref="T:Xamarin.Forms.Cell" /> that will be used as the header for groups in this
            <see cref="T:Xamarin.Forms.ListView" />. The <see cref="P:Xamarin.BindableObject.BindingContext" /> will be the <see cref="T:System.Collections.IEnumerable" />
            for each group.
          </para>
          <para>
            GroupHeaderTemplate is mutually exclusive with <see cref="P:Xamarin.Forms.ListView.GroupDisplayBinding" />. Setting this property
            will set <see cref="P:Xamarin.Forms.ListView.GroupDisplayBinding" /> to <see langword="null" />.
          </para>
          <para>Empty groups will still display a group header.</para>
        </remarks>
        <altmember cref="P:Xamarin.Forms.ListView.ItemsSource" />
        <altmember cref="P:Xamarin.Forms.ListView.GroupDisplayBinding" />
        <altmember cref="P:Xamarin.Forms.ListView.IsGroupingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="GroupHeaderTemplateProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty GroupHeaderTemplateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty GroupHeaderTemplateProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.ListView.GroupHeaderTemplateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GroupHeaderTemplateProperty As BindableProperty " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:Xamarin.Forms.ListView.GroupHeaderTemplate" /> property.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GroupShortNameBinding">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.BindingBase GroupShortNameBinding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.Forms.BindingBase GroupShortNameBinding" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.GroupShortNameBinding" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupShortNameBinding As BindingBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindingBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a binding for the name to display in grouped jump lists.</summary>
        <value>The <see cref="T:Xamarin.Forms.BindingBase" /> instance to apply to grouped lists, or <see langword="null" />.</value>
        <remarks>
          <para>
            When grouping items in a <see cref="T:Xamarin.Forms.ListView" />, it is often useful to have jump lists to jump to specific
            sections in the list. For example, in an alphabetically grouped lists, the jump list would be the the letter of each group.
            This binding is applied against the <see cref="T:System.Collections.IEnumerable" /> of each group to select the short name to display
            in the jump list.
          </para>
          <para>
            Note: On Android, there is no displayed jump list.
          </para>
        </remarks>
        <example>
          <para>This example shows an alphabetized list of people, grouped by first initial with the short name binding set.</para>
          <code lang="C#"><![CDATA[
class Person
{
  public string FullName
  {
    get;
    set;
  }

  public string Address
  {
    get;
    set;
  }
}
          ]]></code>
          <code lang="C#"><![CDATA[
class Group : ObservableCollection<Person>
{
  public Group (string firstInitial)
  {
    FirstInitial = firstInitial;
  }

  public string FirstInitial
  {
    get;
    private set;
  }
}
          ]]></code>
          <code lang="C#"><![CDATA[
ListView CreateListView()
{
  var listView = new ListView {
    IsGroupingEnabled = true,
    GroupDisplayBinding = new Binding ("FirstInitial"),
    GroupShortNameBinding = new Binding ("FirstInitial")
  };

  var template = new DataTemplate (typeof (TextCell));
  template.SetBinding (TextCell.TextProperty, "FullName");
  template.SetBinding (TextCell.DetailProperty, "Address");

  itemsView.ItemTemplate = template;
  itemsView.ItemsSource = new[] {
        new Group ("C") {
            new Person { FullName = "Caprice Nave" }
        },

    new Group ("J") {
            new Person { FullName = "James Smith", Address = "404 Nowhere Street" },
            new Person { FullName = "John Doe", Address = "404 Nowhere Ave" }
        }
  };
}
          ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="HasUnevenRows">
      <MemberSignature Language="C#" Value="public bool HasUnevenRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasUnevenRows" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.HasUnevenRows" />
      <MemberSignature Language="VB.NET" Value="Public Property HasUnevenRows As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that indicates whether this <see cref="T:Xamarin.Forms.ListView" /> element has uneven rows.</summary>
        <value>
          <see langword="true" /> if this <see cref="T:Xamarin.Forms.ListView" /> control has uneven rows. Otherwise, <see langword="false" /></value>
        <remarks>
          <para>Application developers will find that the easiest and least error-prone way to automatically size list view rows for content is: first, to set the <see cref="P:Xamarin.Forms.ListView.HasUnevenRows" /> property to <see langword="true" />; and, second, to either leave <see cref="P:Xamarin.Forms.ListView.RowHeight" /> at its default value of -1, or set it to -1 if it has been changed.</para>
          <para>Application developers will find that the easiest and least error-prone way to set all rows to a constant size is to first set <see cref="P:Xamarin.Forms.ListView.HasUnevenRows" /> to <see langword="false" />, and then either: leave <see cref="P:Xamarin.Forms.ListView.RowHeight" /> at its default value of -1 (or set it back to that value if it has been changed) in order to get the default height for the system; or set the <see cref="P:Xamarin.Forms.ListView.RowHeight" /> property to the desired uniform row height.</para>
          <para>A more detailed discussion follows, below.</para>
          <para>When the app developer sets the <see cref="P:Xamarin.Forms.ListView.HasUnevenRows" /> property to <see langword="false" />, the behavior of the list view depends on the <see cref="P:Xamarin.Forms.ListView.RowHeight" /> property. First, if the developer sets the <see cref="P:Xamarin.Forms.ListView.RowHeight" /> property to a positive value, then all rows in the <see cref="T:Xamarin.Forms.ListView" />, irrespective of the height of their content, will be as tall as the specified <see cref="P:Xamarin.Forms.ListView.RowHeight" /> property value. Second, if the develper instead does not set the <see cref="P:Xamarin.Forms.ListView.RowHeight" /> property, or sets it to a nonpositive value, then all rows in the <see cref="T:Xamarin.Forms.ListView" />, irrespective of the height of their content, will have the default row height for the system.</para>
          <para>When the app developer sets the <see cref="P:Xamarin.Forms.ListView.HasUnevenRows" /> property to <see langword="true" />, the behavior of the list view still depends on the <see cref="P:Xamarin.Forms.ListView.RowHeight" /> property. First, if the developer either does not set the <see cref="P:Xamarin.Forms.ListView.RowHeight" /> property or sets it to -1, list view items are autosized to fit their contents. This is the desired behavior and the intended use case for a <see cref="P:Xamarin.Forms.ListView.HasUnevenRows" /> value of <see langword="true" />, as noted above. Second, if the developer sets the <see cref="P:Xamarin.Forms.ListView.RowHeight" /> property to 0 or to a negative value other than -1, then all rows in the <see cref="T:Xamarin.Forms.ListView" /> will, irrespective of the height of their content, have the default height for the system. Third, and finally, if the developer sets <see cref="P:Xamarin.Forms.ListView.RowHeight" /> to a positive value, then all rows in the <see cref="T:Xamarin.Forms.ListView" /> will, irrespective of the height of their content, be as tall as <see cref="P:Xamarin.Forms.ListView.RowHeight" />, as if <see cref="P:Xamarin.Forms.ListView.HasUnevenRows" /> had been set to <see langword="false" />.
      </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasUnevenRowsProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty HasUnevenRowsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty HasUnevenRowsProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.ListView.HasUnevenRowsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HasUnevenRowsProperty As BindableProperty " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:Xamarin.Forms.ListView.HasUnevenRowsProperty" /> property.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Header">
      <MemberSignature Language="C#" Value="public object Header { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Header" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.Header" />
      <MemberSignature Language="VB.NET" Value="Public Property Header As Object" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the string, binding, or view that will be displayed at the top of the list view.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderElement">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.Element HeaderElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.Forms.Element HeaderElement" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.HeaderElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HeaderElement As Element" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.Element</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty HeaderProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty HeaderProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.ListView.HeaderProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeaderProperty As BindableProperty " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.Header" /> property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplate">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.DataTemplate HeaderTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.Forms.DataTemplate HeaderTemplate" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.HeaderTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Property HeaderTemplate As DataTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a data template to use to format a data object for display at the top of the list view.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplateProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty HeaderTemplateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty HeaderTemplateProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.ListView.HeaderTemplateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeaderTemplateProperty As BindableProperty " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.HeaderTemplate" /> property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGroupingEnabled">
      <MemberSignature Language="C#" Value="public bool IsGroupingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGroupingEnabled" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.IsGroupingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsGroupingEnabled As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether or not grouping is enabled for <see cref="T:Xamarin.Forms.ListView" />.</summary>
        <value>
          <see langword="true" /> if grouping is enabled, <see langword="false" /> otherwise and by default.
        </value>
        <remarks />
        <altmember cref="P:Xamarin.Forms.ListView.GroupDisplayBinding" />
        <altmember cref="P:Xamarin.Forms.ListView.GroupHeaderTemplate" />
      </Docs>
    </Member>
    <Member MemberName="IsGroupingEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty IsGroupingEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty IsGroupingEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.ListView.IsGroupingEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsGroupingEnabledProperty As BindableProperty " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:Xamarin.Forms.ListView.IsGroupingEnabledProperty" /> property.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsPullToRefreshEnabled">
      <MemberSignature Language="C#" Value="public bool IsPullToRefreshEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPullToRefreshEnabled" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.IsPullToRefreshEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPullToRefreshEnabled As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that tells whether the user can swipe down to cause the application to refresh.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPullToRefreshEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty IsPullToRefreshEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty IsPullToRefreshEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.ListView.IsPullToRefreshEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsPullToRefreshEnabledProperty As BindableProperty " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.IsPullToRefreshEnabled" /> property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRefreshing">
      <MemberSignature Language="C#" Value="public bool IsRefreshing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRefreshing" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.IsRefreshing" />
      <MemberSignature Language="VB.NET" Value="Public Property IsRefreshing As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that tells whether the list view is currently refreshing.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRefreshingProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty IsRefreshingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty IsRefreshingProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.ListView.IsRefreshingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsRefreshingProperty As BindableProperty " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.IsRefreshing" /> property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemAppearing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Xamarin.Forms.ItemVisibilityEventArgs&gt; ItemAppearing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Xamarin.Forms.ItemVisibilityEventArgs&gt; ItemAppearing" />
      <MemberSignature Language="DocId" Value="E:Xamarin.Forms.ListView.ItemAppearing" />
      <MemberSignature Language="VB.NET" Value="Public Event ItemAppearing As EventHandler(Of ItemVisibilityEventArgs) " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Xamarin.Forms.ItemVisibilityEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the visual representation of an item is being added to the visual layout.</summary>
        <remarks>This method is guaranteed to fire at some point before the element is on screen.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemDisappearing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Xamarin.Forms.ItemVisibilityEventArgs&gt; ItemDisappearing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Xamarin.Forms.ItemVisibilityEventArgs&gt; ItemDisappearing" />
      <MemberSignature Language="DocId" Value="E:Xamarin.Forms.ListView.ItemDisappearing" />
      <MemberSignature Language="VB.NET" Value="Public Event ItemDisappearing As EventHandler(Of ItemVisibilityEventArgs) " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Xamarin.Forms.ItemVisibilityEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the visual representation of an item is being removed from the visual layout.</summary>
        <remarks>This method is for virtualization usage only. It is not guaranteed to fire for all visible items when the List is removed from the screen. Additionally it fires during virtualization, which may not correspond directly with removal from the screen depending on the platform virtualization technique used.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemSelected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Xamarin.Forms.SelectedItemChangedEventArgs&gt; ItemSelected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Xamarin.Forms.SelectedItemChangedEventArgs&gt; ItemSelected" />
      <MemberSignature Language="DocId" Value="E:Xamarin.Forms.ListView.ItemSelected" />
      <MemberSignature Language="VB.NET" Value="Public Event ItemSelected As EventHandler(Of SelectedItemChangedEventArgs) " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Xamarin.Forms.SelectedItemChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event that is raised when a new item is selected.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemTapped">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Xamarin.Forms.ItemTappedEventArgs&gt; ItemTapped;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Xamarin.Forms.ItemTappedEventArgs&gt; ItemTapped" />
      <MemberSignature Language="DocId" Value="E:Xamarin.Forms.ListView.ItemTapped" />
      <MemberSignature Language="VB.NET" Value="Public Event ItemTapped As EventHandler(Of ItemTappedEventArgs) " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Xamarin.Forms.ItemTappedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event that is raised when an item is tapped.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyRowTapped">
      <MemberSignature Language="C#" Value="public void NotifyRowTapped (int index, Xamarin.Forms.Cell cell = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyRowTapped(int32 index, class Xamarin.Forms.Cell cell) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.NotifyRowTapped(System.Int32,Xamarin.Forms.Cell)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="cell" Type="Xamarin.Forms.Cell" />
      </Parameters>
      <Docs>
        <param name="index">For internal use by the Xamarin.Forms platform..</param>
        <param name="cell">For internal use by the Xamarin.Forms platform.</param>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyRowTapped">
      <MemberSignature Language="C#" Value="public void NotifyRowTapped (int groupIndex, int inGroupIndex, Xamarin.Forms.Cell cell = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyRowTapped(int32 groupIndex, int32 inGroupIndex, class Xamarin.Forms.Cell cell) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.NotifyRowTapped(System.Int32,System.Int32,Xamarin.Forms.Cell)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupIndex" Type="System.Int32" />
        <Parameter Name="inGroupIndex" Type="System.Int32" />
        <Parameter Name="cell" Type="Xamarin.Forms.Cell" />
      </Parameters>
      <Docs>
        <param name="groupIndex">For internal use by the Xamarin.Forms platform.</param>
        <param name="inGroupIndex">For internal use by the Xamarin.Forms platform.</param>
        <param name="cell">To be added.</param>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="On&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.IPlatformElementConfiguration&lt;T,Xamarin.Forms.ListView&gt; On&lt;T&gt; () where T : Xamarin.Forms.IConfigPlatform;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Xamarin.Forms.IPlatformElementConfiguration`2&lt;!!T, class Xamarin.Forms.ListView&gt; On&lt;(class Xamarin.Forms.IConfigPlatform) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.On``1" />
      <MemberSignature Language="VB.NET" Value="Public Function On(Of T As IConfigPlatform) () As IPlatformElementConfiguration(Of T, ListView)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;T,Xamarin.Forms.ListView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Xamarin.Forms.IConfigPlatform</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>Returns the platform-specific instance of this <see cref="T:Xamarin.Forms.ListView" />, on which a platform-specific method may be called.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBindingContextChanged">
      <MemberSignature Language="C#" Value="protected override void OnBindingContextChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBindingContextChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.OnBindingContextChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBindingContextChanged ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Method that is called when the binding context changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSizeRequest">
      <MemberSignature Language="C#" Value="protected override Xamarin.Forms.SizeRequest OnSizeRequest (double widthConstraint, double heightConstraint);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype Xamarin.Forms.SizeRequest OnSizeRequest(float64 widthConstraint, float64 heightConstraint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.OnSizeRequest(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnSizeRequest (widthConstraint As Double, heightConstraint As Double) As SizeRequest" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.SizeRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="widthConstraint" Type="System.Double" />
        <Parameter Name="heightConstraint" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="widthConstraint">The width constraint.</param>
        <param name="heightConstraint">The height constraint.</param>
        <summary>Method that is called when a size request is made..</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshAllowed">
      <MemberSignature Language="C#" Value="public bool RefreshAllowed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RefreshAllowed" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.RefreshAllowed" />
      <MemberSignature Language="VB.NET" Value="Public Property RefreshAllowed As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshCommand">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand RefreshCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand RefreshCommand" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.RefreshCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property RefreshCommand As ICommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the command that is run when the list view enters the refreshing state.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshCommandProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty RefreshCommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty RefreshCommandProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.ListView.RefreshCommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RefreshCommandProperty As BindableProperty " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.RefreshCommand" /> property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Refreshing">
      <MemberSignature Language="C#" Value="public event EventHandler Refreshing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Refreshing" />
      <MemberSignature Language="DocId" Value="E:Xamarin.Forms.ListView.Refreshing" />
      <MemberSignature Language="VB.NET" Value="Public Event Refreshing As EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event that is raised when the list view refreshes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHeight">
      <MemberSignature Language="C#" Value="public int RowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RowHeight" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.RowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property RowHeight As Integer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that represents the height of a row.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty RowHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty RowHeightProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.ListView.RowHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RowHeightProperty As BindableProperty " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The backing store for the <see cref="P:Xamarin.Forms.ListView.RowHeightProperty" /> property.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (object item, Xamarin.Forms.ScrollToPosition position, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(object item, valuetype Xamarin.Forms.ScrollToPosition position, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.ScrollTo(System.Object,Xamarin.Forms.ScrollToPosition,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollTo (item As Object, position As ScrollToPosition, animated As Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="position" Type="Xamarin.Forms.ScrollToPosition" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="item">The item from your <see cref="P:Xamarin.Forms.ListView.ItemsSource" /> to scroll to.</param>
        <param name="position">How the item should be positioned on screen.</param>
        <param name="animated">Whether or not the scroll should be animated.</param>
        <summary>Scrolls the ListView to the <paramref name="item" />.</summary>
        <remarks>
          <para>A linear search is done for the item, so if the same reference appears multiple times in the list, the first item will be scrolled to. This includes if grouping is enabled.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="position" /> contains an invalid value for <see cref="T:Xamarin.Forms.ScrollToPosition" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (object item, object group, Xamarin.Forms.ScrollToPosition position, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(object item, object group, valuetype Xamarin.Forms.ScrollToPosition position, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.ScrollTo(System.Object,System.Object,Xamarin.Forms.ScrollToPosition,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollTo (item As Object, group As Object, position As ScrollToPosition, animated As Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="group" Type="System.Object" />
        <Parameter Name="position" Type="Xamarin.Forms.ScrollToPosition" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="item">The item from your <see cref="P:Xamarin.Forms.ListView.ItemsSource" /> to scroll to.</param>
        <param name="group">The group from your <see cref="P:Xamarin.Forms.ListView.ItemsSource" /> to scroll to.</param>
        <param name="position">How the item should be positioned on screen.</param>
        <param name="animated">Whether or not the scroll should be animated.</param>
        <summary>Scrolls the ListView to the <paramref name="item" /> in the <paramref name="group" /></summary>
        <remarks>
          <para>A linear search is done for the item, so if the same reference appears multiple times in the <paramref name="group" />, the first item will be scrolled to. The same item in a different group will be ignored.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="position" /> contains an invalid value for <see cref="T:Xamarin.Forms.ScrollToPosition" />.
                </exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:Xamarin.Forms.ListView.IsGroupingEnabled" /> is <see langword="false" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ScrollToRequested">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Xamarin.Forms.ScrollToRequestedEventArgs&gt; ScrollToRequested;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Xamarin.Forms.ScrollToRequestedEventArgs&gt; ScrollToRequested" />
      <MemberSignature Language="DocId" Value="E:Xamarin.Forms.ListView.ScrollToRequested" />
      <MemberSignature Language="VB.NET" Value="Public Event ScrollToRequested As EventHandler(Of ScrollToRequestedEventArgs) " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Xamarin.Forms.ScrollToRequestedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedItem">
      <MemberSignature Language="C#" Value="public object SelectedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedItem" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.SelectedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedItem As Object" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the currently selected item from the <see cref="P:Xamarin.Forms.ListView.ItemsSource" />.</summary>
        <value>The selected item or <see langword="null" /> if no item is selected.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SelectedItemProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty SelectedItemProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty SelectedItemProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.ListView.SelectedItemProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SelectedItemProperty As BindableProperty " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:Xamarin.Forms.ListView.SelectedItemProperty" /> property.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SendCellAppearing">
      <MemberSignature Language="C#" Value="public void SendCellAppearing (Xamarin.Forms.Cell cell);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendCellAppearing(class Xamarin.Forms.Cell cell) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.SendCellAppearing(Xamarin.Forms.Cell)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="Xamarin.Forms.Cell" />
      </Parameters>
      <Docs>
        <param name="cell">For internal use by the Xamarin.Forms platform.</param>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendCellDisappearing">
      <MemberSignature Language="C#" Value="public void SendCellDisappearing (Xamarin.Forms.Cell cell);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendCellDisappearing(class Xamarin.Forms.Cell cell) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.SendCellDisappearing(Xamarin.Forms.Cell)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="Xamarin.Forms.Cell" />
      </Parameters>
      <Docs>
        <param name="cell">For internal use by the Xamarin.Forms platform.</param>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendRefreshing">
      <MemberSignature Language="C#" Value="public void SendRefreshing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendRefreshing() cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.SendRefreshing" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendRefreshing ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatorColor">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.Color SeparatorColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Xamarin.Forms.Color SeparatorColor" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.SeparatorColor" />
      <MemberSignature Language="VB.NET" Value="Public Property SeparatorColor As Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color of the bar that separates list items.</summary>
        <value>To be added.</value>
        <remarks>The default value is <c>Color.Default</c>. This property has no effect if <see cref="P:Xamarin.Forms.ListView.SeparatorVisibility" /> is <see langword="false" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatorColorProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty SeparatorColorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty SeparatorColorProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.ListView.SeparatorColorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SeparatorColorProperty As BindableProperty " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.SeparatorColor" /> property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatorVisibility">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.SeparatorVisibility SeparatorVisibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Xamarin.Forms.SeparatorVisibility SeparatorVisibility" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.ListView.SeparatorVisibility" />
      <MemberSignature Language="VB.NET" Value="Public Property SeparatorVisibility As SeparatorVisibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.SeparatorVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that tells whether separators are visible between items.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatorVisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty SeparatorVisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty SeparatorVisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.ListView.SeparatorVisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SeparatorVisibilityProperty As BindableProperty " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.SeparatorVisibility" /> property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetupContent">
      <MemberSignature Language="C#" Value="protected override void SetupContent (Xamarin.Forms.Cell content, int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetupContent(class Xamarin.Forms.Cell content, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.SetupContent(Xamarin.Forms.Cell,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetupContent (content As Cell, index As Integer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Xamarin.Forms.Cell" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="content">The cell to set up.</param>
        <param name="index">The index of the cell in the list of items.</param>
        <summary>Application developers override this method to register event handlers for list view items.</summary>
        <remarks>
          <para>Application developers must call <see cref="M:Xamarin.Forms.ListView.SetupContent(Xamarin.Forms.Cell, int)" /> before performing any other action when overriding this method.</para>
          <block type="note">Application developers who override this method to allocate resources must override <see cref="M:Xamarin.Forms.ListView.UnhookContent(Xamarin.Forms.Cell)" /> in order to deallocate them.</block>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhookContent">
      <MemberSignature Language="C#" Value="protected override void UnhookContent (Xamarin.Forms.Cell content);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void UnhookContent(class Xamarin.Forms.Cell content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ListView.UnhookContent(Xamarin.Forms.Cell)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub UnhookContent (content As Cell)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Xamarin.Forms.Cell" />
      </Parameters>
      <Docs>
        <param name="content">The cell to unhook.</param>
        <summary>Application developers override this method to unregister event handlers for list view items that they registered in <see cref="M:Xamarin.Forms.ListView.SetupContent(Xamarin.Forms.Cell, int)" />.</summary>
        <remarks>
          <para>Application developers must call <see cref="M:Xamarin.Forms.ListView.UnhookContent(Xamarin.Forms.Cell, int)" /> before performing any other action when overriding this method.</para>
          <block type="note">Application developers who override <see cref="M:Xamarin.Forms.ListView.SetupContent(Xamarin.Forms.Cell, int)" /> to allocate resources must override this method in order to deallocate them.</block>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>